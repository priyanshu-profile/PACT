# -*- coding: utf-8 -*-
"""My_Flow_Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BqqaBhYrfhkr0Y1mD44Mqagbqu-cINTl
"""

!pip install google-generativeai

import os
import google.generativeai as genai

from google.colab import userdata

API_KEY=userdata.get('API_KEY')
# Configure the client library by providing your API key.
genai.configure(api_key=API_KEY)

generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
]

model = genai.GenerativeModel(
  model_name="gemini-1.5-flash",
  generation_config=generation_config,
)

import json
import random
import matplotlib.pyplot as plt

import pandas as pd
import numpy as np

# Specify the path to the JSON file
json_file_path = "/content/updated-database.json"

# Load the JSON file
with open(json_file_path, "r") as json_file:
    data = json.load(json_file)

####################################################################### GENERAL ########################################################################################
def Greet_Ask():
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a travel agent, and you have to greet the traveler and ask for traveler's preference for booking the desired tour package",
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"Hello there. Welcome, I am happy to help you choose the travel package according to your preferences. Can you please tell me what kind of travel experience you are planning for yourself?\" \n",
          ],
        },
      ]
    )
    input = "You are a travel agent, and you have to greet the traveler and ask for traveler's preference for booking the desired tour package"
    response = chat_session.send_message(input)
    return response.text

def Elicit_Preference(description):
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a human traveler and you are describing the kind of tour package you are planning according to your personality profile.\n"
            "Your personality description is: Vacations, relaxing in quiet and peaceful places.\n"
            "You will say:"

          ],
        },
        {
          "role": "model",
          "parts": [
            "\"I want to enjoy vacations where I can get away from it all in order to relax in quiet and peaceful places\" \n",
          ],
          "role": "user",
          "parts": [
            "You are a human traveler and you are describing the kind of tour package you are planning according to your personality profile.\n"
            "Your personality description is: Landmark, event, scenic vista, attraction.\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"I am always ready to stop for that landmark, event, scenic vista or attraction.\" \n",
          ],

        },
      ]
    )
    input = "You are a human traveler and you are describing the kind of tour package you are planning according to your personality profile."+"\n"+"Your personality description is: " + description +".\n"+"You will say:"
    response = chat_session.send_message(input)
    return response.text

def Inform(package, cost, services, amenities):
    service=""
    amenity=""
    for i in services:
      service = service+services[i] + " as "+i+" option, "

    for i in amenities:
      amenity = amenity+i+", "

    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a travel agent and you are giving information about a package to the traveler\n"
            "The name of the package is Sight Tour\n"
            "The cost of the package is 53432$, the package has cozy cottage as accommodation option, fine dining as meal option and private standard as transportation option\n"
            "The package has the amenities of virtual reality experiences, detoxification and mindfulness sessions and outdoor activities\n"
            "You will provide the above mentioned information by replying:"

          ],
        },
        {
          "role": "model",
          "parts": [
            "\"Great! You will love our 'Sight Tour' package. The package will cost you 53432$ and you will be getting amazing amenities like virtual reality experiences, detoxification and mindfulness sessions and outdoor activities. You will get cozy cottage as accommodation, fine dining and private standard transportation. Would you like to go with this package?\"\n",
          ],
        },
      ]
    )
    input = "You are a travel agent and you are giving information about a package to the traveler\n" + "The name of the package is " + package +"\n"+"The cost of the package is "+str(cost)+"$, the package has "+service+"\n"+"The package has the amenities of "+amenity+"\n"+"You will provide the above mentioned information by replying:"
    response = chat_session.send_message(input)
    return response.text

def Ask_Clarification(aspect,specific):
  if specific==False:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler and you want to know what options are available for accommodation in the package\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\What more options will I get for accommodations?\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler and you want to know what options are available for "+aspect+" in the package\n"+"You will say:"
    response = chat_session.send_message(input)
  else:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler and you want to know more about detoxification and mindfulness sessions\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\Can you tell me more about detoxification and mindfulness sessions? What exactly am I gonna get in this?\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler and you want to know more about "+aspect+ "\n"+"You will say:"
    response = chat_session.send_message(input)
  return response.text


def Enquire_Y(aspect):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler and you want to know more about detoxification and mindfulness sessions\n"
          "You will say:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\Can you tell me more about detoxification and mindfulness sessions? What exactly am I gonna get in this?\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler and you want to know more about "+aspect+ "\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text

def Provide_Clarification(aspect):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent and in negotiation with a traveler\n"
          "The traveler has asked about nutritional counselling\n"
          "You are providing some information about nutritional counselling provided in the tour package\n"
          "You are describing the pros of nutritional counselling by saying:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\ Nutritional counseling is a fantastic addition to your package, offering personalized dietary advice, promoting holistic wellness, and helping you maintain healthy habits even after your vacation, ensuring you feel great and fully enjoy your trip.\"\n",
        ],
      },
    ]
  )
  input = "You are a travel agent and in negotiation with a traveler"+"\n"+"The traveler has asked about "+aspect+"\n"+"You are providing some information about "+aspect+" provided in the tour package"+"\n"+"You are describing the pros of "+aspect+" by saying:"
  response = chat_session.send_message(input)
  return response.text

def provide_consent(aspect,remove):
  if remove==False:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "The travel agent has proposed an offer to add paragliding to the package\n"
            "You are providing your consent to add paragliding to the package\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\ Sure, let's keep paragliding in the package.\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The travel agent has proposed an offer to add "+aspect+" to the package"+"\n"+"You are providing your consent to add "+aspect+" to the package"+"\n"+"You will say:"
  else:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "The travel agent has proposed an offer to remove paragliding from the package\n"
            "You are providing your consent to remove paragliding to the package\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\ Okay, let's remove paragliding.\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The travel agent has proposed an offer to remove "+aspect+" from the package"+"\n"+"You are providing your consent to remove "+aspect+" from the package"+"\n"+"You will say:"

  response = chat_session.send_message(input)
  return response.text

############################################################# COST ##################################################################################################

def Ask_Price(aspect):
  if aspect==None:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler and you want to know about the current cost of the package\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\What is the cost of the package now?\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler and you want to know about the current cost of the package"+"\n"+"You will say:"
    response = chat_session.send_message(input)
  else:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler and you want to know about the cost of the package after adding 'paragliding' to the package\n"
            "You will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\What is the cost of the package after adding paragliding to it?\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler and you want to know about the cost of the package after adding '"+aspect+"' to the package"+"\n"+"You will say:"
    response = chat_session.send_message(input)
  return response.text


def Negotiate_Price_Decrease(curr_offer, counter_offer):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the agent for a tour package\n"
          "The agent has proposed the cost of $32000\n"
          "You are proposing budget for tour package as $26000\n"
          "Then you will reply (Remember you are proposing lower price than the agent proposed price)"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"I cannot afford $32000, what do you say about $26000 for this package?\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The agent has proposed the cost of $"+str(curr_offer)+"\n"+"You are proposing budget for tour package as $"+str(counter_offer)+"\n"+"Then you will reply (Remember you are proposing lower price than the agent proposed price)"
  response = chat_session.send_message(input)
  return response.text

def Price_NoChange_buyer(budget,cost):
  if cost==None:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "You are proposing budget for tour package of $26000 and you do not want to go above this price\n"
            "Then you will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"This package is impressive but I cannot go above $26000.\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You are proposing budget for tour package of $"+str(budget)+" and you do not want to go above this price"+"\n"+"Then you will say:"

  else:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "The travel agent has proposed the price of $48000 for the package\n"
            "You do not want to pay $48000 for this package. You are proposing budget for tour package of $26000\n"
            "Then you will say:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"$48000 is too costly for me, what about $26000?\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The travel agent has proposed the price of $"+str(cost)+" for the package"+"\n"+"You do not want to pay $"+str(cost)+" for this package. You are proposing budget for tour package of $"+str(budget)+"\n"+"Then you will say:"

  response = chat_session.send_message(input)
  return response.text


def Concern_Price(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the travel agent for a tour package\n"
          "The agent has proposed the cost of $32000\n"
          "You are concerned about this proposed price. You are not sure if $32000 is justifiable for the current package\n"
          "Then you will tell the travel agent:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"Isn't $32000 is too costly for this package?\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The agent has proposed the cost of $"+str(cost)+"\n"+"You are concerned about this proposed price. You are not sure if "+str(cost)+" is justifiable for the current package"+"\n"+"Then you will tell the travel agent:"
  response = chat_session.send_message(input)
  return response.text

def Disagree_Price(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the travel agent for a tour package\n"
          "The agent has proposed the cost of $32000\n"
          "You do not agree with this price of $32000 and want this package for a lower price\n"
          "Then you will tell the travel agent:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"I don't think this package should cost $32000\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"The agent has proposed the cost of $"+str(cost)+"\n"+"You do not agree with this price of "+str(cost)+" and want this package at a lower price"+"\n"+"Then you will tell the travel agent:"
  response = chat_session.send_message(input)
  return response.text

def Tell_Price(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent in negotiation with the customer\n"
          "The customer has asked you the current cost of the package\n"
          "The cost of the package is $46000. You will reply:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"This package will cost you $46000\"\n",
        ],
      },
    ]
  )
  input = "You are a travel agent in negotiation with the customer"+"\n"+"The customer has asked you the current cost of the package"+"\n"+"The cost of the package is "+str(cost)+". You will reply:"
  response = chat_session.send_message(input)
  return response.text

def Assurance_Price(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent in negotiation with the customer\n"
          "The customer has raised concern and disagreement\n"
          "The current cost of the package is $46000. You want to assure the customer that this price is affordable\n"
          "You will say:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\I completely understand your concern about the price. However, for $46000, this package offers exceptional value with premium amenities. I highly recommend taking advantage of this price.\n",
        ],
      },
    ]
  )
  input = "You are a travel agent in negotiation with the customer"+"\n"+"The customer has raised concern and disagreement"+"\n"+"The current cost of the package is "+str(cost)+"You want to assure the customer that this price is affordable"+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text


def Justify_Price(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent in negotiation with the customer\n"
          "The customer has raised concern and disagreement\n"
          "The current cost of the package is $46000. You want to persuade the customer that this price is justified for this package\n"
          "You will say:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\I completely understand your concern about the price. However, this offer is part of an exclusive promotion that won't last long. Our previous customers have rated this package highly, and it's a rare opportunity to get such a comprehensive experience at this price. I highly recommend taking advantage of this while it's available.\n",
        ],
      },
    ]
  )
  input = "You are a travel agent in negotiation with the customer"+"\n"+"The customer has raised concern and disagreement"+"\n"+"The current cost of the package is "+str(cost)+". You want to persuade the customer that this price is justified for this package"+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text

def Negotiate_Price_Increase(curr_offer, proposed_offer):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent in negotiation with the customer\n"
          "The customer has proposed the price of $26000\n"
          "This price is less for the package and you propose a counter price of $45000\n"
          "You will say (Remember you are proposing higher price than the customer proposed price)"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\I understand your budget sir, but $26000 is very less for this package, how about you get this deal at $45000?\n",
        ],
      },
    ]
  )
  input = "You are a travel agent in negotiation with the customer"+"\n"+"The customer has proposed the price of "+str(curr_offer)+"\n"+"This price is less for the package and you propose a counter price of "+str(proposed_offer)+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text

def Price_NoChange_seller(cost):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a travel agent in negotiation with the customer\n"
          "You are proposing cost for tour package of $46000 and you do not want to go below this price\n"
          "You will say:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\It is very difficult for me to go below $46000 for the current package\n",
        ],
      },
    ]
  )
  input = "You are a travel agent in negotiation with the customer"+"\n"+"You are proposing cost for tour package of "+str(cost)+" and you do not want to go below this price"+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text

#################################################### RECOMMENDATIONS ################################################################################################

def Remove_X_buyer(aspect, budget):
  if budget==None:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "You want to remove the amenity 'reading retreats' from the package as you are not interested in including it in the package\n"
            "You will tell the travel agent:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"I do not want reading retreats in my package, can you please remove it.\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You want to remove the amenity '"+aspect+"' from the package as you are not interested in including it in the package"+"\n"+"You will tell the travel agent:"


  else:
    chat_session = model.start_chat(
      history=[
        {
          "role": "user",
          "parts": [
            "You are a traveler, you are in negotiation with the agent for a tour package\n"
            "You want the cost of the package to be $35000, so you want to remove the amenity 'reading retreats' from the package to lower the cost of the package\n"
            "You will tell the travel agent:"
          ],
        },
        {
          "role": "model",
          "parts": [
            "\"Can I get this package at $35000? You can remove reading retreats from the package.\"\n",
          ],
        },
      ]
    )
    input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You want the cost of the package to be $"+str(budget)+", so you want to remove the amenity '"+aspect+"' from the package to lower the cost of the package"+"\n"+"You will tell the travel agent:"


  response = chat_session.send_message(input)
  return response.text


# def Negotiate_Add_X():
#   "execution"

def Disagree_X(aspect):
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the travel agent for a tour package\n"
          "You are arguing with the travel agent over why you should not include the option paragliding to your package\n"
          "You are showing disagreement for including paragliding in your package\n"
          "You will tell the travel agent:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"I'm not interested in adding paragliding to my package; I prefer more relaxing and safer activities.\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You are arguing with the travel agent over why you should not include the option "+aspect+" to your package"+"\n"+"You are showing disagreement for including "+aspect+" in your package"+"\n"+"You will tell the travel agent:"
  response = chat_session.send_message(input)
  return response.text

def Remove_Y_Add_X(removed,added):
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are suggesting to add "+added+" to the package and remove "+removed+" from the package"+"\n"+"Generate a concise utterance for this:"
  response = chat_session.send_message(input)
  return response.text

def Remove_X_seller(removed,cost):
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are removing "+removed+" from the package and mentioning $"+str(cost)+" as cost of the package after removal"+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text


def Assurance_Y(aspect):
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are assuring the customer that including "+aspect+" in the package is very beneficial"+"\n"+"You any persuasive strategy to give this assurance"+"\n"+"You will say:"
  response = chat_session.send_message(input)
  return response.text

def Justify_Y(aspect,strategy):
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are convincing the customer that including "+aspect+" in the package is justified"+"\n"+"You use "+strategy+" strategy to give justification"+"\n"+"You will say: (Remember to keep the utterance precise and say in only 1 sentence)"
  response = chat_session.send_message(input)
  return response.text

  ###################################################################### Last ######################################################################################

def Accept_buyer():
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the travel agent for a tour package\n"
          "You are accepting the deal\n"
          "You will tell the travel agent:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"Works well for me. I want this tour package.\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You are accepting the deal"+"\n"+"You will tell the travel agent:"
  response = chat_session.send_message(input)
  return response.text

def Reject_buyer():
  chat_session = model.start_chat(
    history=[
      {
        "role": "user",
        "parts": [
          "You are a traveler, you are in negotiation with the travel agent for a tour package\n"
          "You are rejecting the deal\n"
          "You will tell the travel agent:"
        ],
      },
      {
        "role": "model",
        "parts": [
          "\"Thanks for the support, but I think this package does not suit me.\"\n",
        ],
      },
    ]
  )
  input = "You are a traveler, you are in negotiation with the agent for a tour package"+"\n"+"You are rejecting the deal"+"\n"+"You will tell the travel agent:"
  response = chat_session.send_message(input)
  return response.text

def Accept_seller():
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are accepting the deal and closing the conversation"+"\n"+"You will say: (Remember to generate a concised utterance and be thankful to the customer)"
  response = chat_session.send_message(input)
  return response.text

def Reject_seller():
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are rejecting the deal and closing the conversation"+"\n"+"You will say: (Remember to generate a concised utterance and be polite and apologetic to the customer, do not leave any placeholders and keep it general)"
  response = chat_session.send_message(input)
  return response.text

def Acknowledge_acceptance():
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You are acknowledging the acceptance by the customer"+"\n"+"You will say: (Remember to generate a concised utterance and be thankful to the customer, do not leave any placeholders and keep it general)"
  response = chat_session.send_message(input)
  return response.text

def consent_response(added,cost):
  chat_session = model.start_chat(
    history=[

    ]
  )
  input = "You are a travel agent negotiating with a customer for a tour package"+"\n"+"You have got consent from the customer to add "+added+"to the package"+"\n"+"You generate a consent response confirming the addition of "+added+" to the package"+"\n"+"You also mention $"+str(cost)+" as the cost of the package"+"\n"+"You will say: (Remember to generate a 1 sentence utterance)"
  response = chat_session.send_message(input)
  return response.text

personality = {
    1:"Nature Wanderer",
    2:"Nautical Adventure",
    3:"Active Pursuits",
    4:"Sandy Serenity",
    5:"Cultural Odyssey",
    6:"TranquilEscape",
    7:"SightTour",
    8:"Adrenaline Rush",
    9:"Collector's Haven",
    10:"Vibrant Nightlife"
}

traveler_intent = {
    -1:'NA',
    0: 'Elicit_Preference',
    1: 'Ask_Clarification-X',
    2: 'Negotiate_Remove_X',
    3: 'Negotiate_Add_X',
    4: 'Disagree_X',
    5: 'Ask_Price',
    6: 'Negotiate_Price_Decrease',
    7: 'Concern_Price',
    8: 'Negotiate_Price_NoChange',
    9: 'Disagree_Price',
    10: 'Accept',
    11: 'provide_consent'
}

agent_intent = {
    -1: 'NA',
    0: 'Greet_Ask',
    1: 'Inform',
    2: 'Provide_Clarification_X',
    3: 'Assurance_Y',
    4: 'Negotiate_Add_X',
    5: 'Negotiate_Remove_X',
    6: 'Justify_X',
    7: 'Tell_Price',
    8: 'Negotiate_Price_NoChange',
    9: 'Negotiate_Price_Increase',
    10: 'Assurance_Price',
    11: 'Justify_Price',
    12: 'Accept',
    13: 'Acknowledge acceptance',
    14: 'consent_response'
}

buyer_profile = [0,1,2] #0 - budget, 1 - quality, 2 - both budget and quality
#arg_profile = [0,1,2,3] # 0 - Agreeable, 1 - Disagreeable, 2 - open-minded, 3 - Argumentative
arg_profile_buyer = [0,1]
arg_profile_seller = [2,3]
neg_profile = [0,1,2] # 0 - boulware(0.3), 1 - boulware(0.6), 2 - conceder(1.2)

arg_sub_strategy = {0:'value_proposition',1:'social_proof',2:'authority',3:'complement'}

stage1 = {1}
stage2 = {3,4}
stage3 = {7,9}
stage4 = {11,12}

arg_stage1 = {2}
arg_stage2 = {5}
arg_stage3 = {8,10}

sugg = {4,5}
arg_sugg = {3,7}
price = {9,10}
arg_price = {11,12}

##################################################### Generation of Counter Offer ############################################################################3

from types import NotImplementedType
def counter_offer(role,ip,rp,tsi):
  counter_offer = 0
  '''if role =='b':
    counter_offer = ip + tsi*(rp - ip)
  elif role == 's':
    counter_offer = ip - (1-tsi)*(ip - rp)'''
  if role =='b':
    counter_offer = ip + tsi*(rp - ip)
  elif role == 's':
    counter_offer = rp + (1-tsi)*(ip - rp)

  return counter_offer

def expected_utility(init_utility,curr_turn,dead_line,concess_strategy):
  '''if role == 'b':
    exp_util = init_utility + (1 - init_utility)*((curr_turn/dead_line)**(1/concess_strategy))
  if role == 's':
    exp_util = init_utility - (1 - init_utility)*((curr_turn/dead_line)**(1/concess_strategy))'''
  exp_util = init_utility + (1 - init_utility)*((curr_turn/dead_line)**(1/concess_strategy))

  return exp_util

############################## Choosing an Alternative to Add #########################################

def same_price(domain,price_range,curr_amenities, removed_amenities, amenities): #returns another amenity in same price range or false
  d=domain
  tried = {domain}
  while True:
    d = random.randint(0,4)
    if d!=domain and amenities[price_range][d][0] not in curr_amenities and amenities[price_range][d][0] not in removed_amenities:
        return [price_range, d, amenities[price_range][d][1]]
        #return amenities[price_range][d],price_range,d #returns the list of some other amenity and its cost in same price range
    else:
        tried.add(d)
        if len(tried)==5:
          return False

def budget_option(budget, domain, price_range, cost, curr_amenities, removed_amenities, amenities): #returns the amenity which keeps the revised cost closest to the budget
  to_add=None
  removed_cost = amenities[price_range][domain][1]
  tolerance=float('inf')
  for pr in range(4):
    for d in range(5):
      if amenities[pr][d][0] not in curr_amenities and amenities[pr][d][0] not in removed_amenities:
        revised_cost = cost - removed_cost + amenities[pr][d][1]
        temp = 100*(abs(budget - revised_cost))/budget
        if temp<tolerance:
          to_add = [pr,d,amenities[pr][d][1]]


def lower_price(budget, domain,price_range, cost, curr_amenities, removed_amenities, amenities):
  to_add=None
  if budget==None:
    option_cost=float('-inf')
    for pr in range(4):
      for d in range(5):
        if amenities[pr][d][0] not in curr_amenities and amenities[pr][d][0] not in removed_amenities and amenities[pr][d][1]<amenities[price_range][domain][1]:
          if amenities[pr][d][1]>option_cost:
            option_cost = amenities[pr][d][1]
            to_add = [pr, d, amenities[pr][d][1]]
  else:
    removed_cost = amenities[price_range][domain][1]
    tolerance=float('inf')
    for pr in range(4):
      for d in range(5):
        if amenities[pr][d][0] not in curr_amenities and amenities[pr][d][0] not in removed_amenities and amenities[pr][d][1]<amenities[price_range][domain][1]:
          revised_cost = cost - removed_cost + amenities[pr][d][1]
          temp = 100*(abs(budget - revised_cost))/budget
          if temp<tolerance:
            to_add = [pr,d,amenities[pr][d][1]]
  return to_add

def buyer_remove(distribution, curr_amenities):
  to_remove=None
  domains = [0,1,2,3,4]
  while True:
    temp = random.choices(domains, weights=distribution, k=1)[0]
    for amenity in curr_amenities:
      if temp == curr_amenities[amenity][1]:
        return curr_amenities[amenity]


def update_domains(domains, domain, polarity):
  if polarity==1:
    dec = (domains[domain]/100)*domains[domain]
    inc_rest = dec/4
    for i in range(5):
      if i==domain:
        domains[i]=domains[i]-dec
      else:
        domains[i]=domains[i]+inc_rest

  else:
    inc = ((100-domains[domain])/100)*domains[domain]
    dec_rest = inc/4
    for i in range(5):
      if i==domain:
        domains[i]=domains[i]+inc
      else:
        domains[i]=domains[i]-dec_rest

  return domains

def execute_flow(data, conv_id):
    package = "package"+str(np.random.randint(6,11))
    package_name = data[package]['Tourist_Package_Name']
    description = data[package]['Description']
    amenities = data[package]['options']
    domains = data[package]['Optional_amenities']
    domain_dict={}
    for i, domain in enumerate(domains):
      domain_dict[domain]=i
      if i==0:
        domains[i]=4
      else:
        domains[i]=24

    ser_options = ['accommodation','meals','transportation']

    services = {'accommodation':[x for x in data[package]['Services']['accommodation']], 'meals':[x for x in data[package]['Services']['meals']], 'transportation':[x for x in data[package]['Services']['transportation']]}
    curr_service = {'accommodation': services['accommodation'][1], 'meals': services['meals'][1], 'transportation': services['transportation'][1]}
    rand_nos={0}
    while len(rand_nos)<3:
        rand_nos.add(random.randint(1,4))

    curr_amenities={}
    for j in rand_nos:
      curr_amenities[amenities[3][j][0]] = [3,j,amenities[3][j][1]]
    removed_amenities = {}
    cost = 0
    for ser in curr_service:
        cost=cost+data[package]['Services'][ser][curr_service[ser]]
    for j in rand_nos:
        cost=cost+amenities[3][j][1]

    buyer = random.choice(buyer_profile)
    argument_buyer = random.choice(arg_profile_buyer)

    #Generating preference distribution of buyer
    # Generate 4 random points in the interval [0, 100]
    random_points = sorted(np.random.uniform(0, 100, 4))

    # Add 0 and 100 to the list of points to include the ends of the interval
    random_points = [0] + random_points + [100]

    # Calculate the differences between successive points to get the segment lengths
    distribution = [random_points[i+1] - random_points[i] for i in range(len(random_points)-1)]

    min = np.argmin(distribution)
    distribution[0], distribution[min] = distribution[min], distribution[0]


    negotiation = random.choice(neg_profile)
    if negotiation==0:
       tsi=0.3
    elif negotiation==1:
       tsi=0.6
    else:
       tsi=1.2


    nego_deadline = 25
    dialogue_flow=[0,0,1]
    ############################################################################################################
    #utterances=["dummy","dummy","dummy"]
    utterances=[]

    uttr = Greet_Ask()
    utterances.append(uttr)
    uttr = Elicit_Preference(description)
    utterances.append(uttr)
    uttr = Inform(package_name, cost, curr_service, curr_amenities)
    utterances.append(uttr)

    ############################################################################################################
    t=0
    agent=0
    seller_initial_price = cost
    buyer_initial_price = random.randint(int(0.35*seller_initial_price), int(0.85*seller_initial_price))
    buyer_price = buyer_initial_price
    seller_price = seller_initial_price

    if buyer==0:
       mue = 0.1
       sd = 0.015
    elif buyer==1:
       mue = 0.2
       sd = 0.015
    elif buyer==2:
       mue = 0.3
       sd = 0.015

    tolerance_buyer = np.random.normal(mue, sd)
    tolerance_seller = 0.25

    seller_min_price = int((1-tolerance_seller) *seller_initial_price)
    buyer_max_price = int(buyer_initial_price + tolerance_buyer*buyer_initial_price)
    seller_capacity = 0.5*(seller_initial_price + seller_min_price)
    buyer_capacity = 0.5*(buyer_initial_price + buyer_max_price)

    if buyer_capacity>=seller_capacity:
       argument_seller = 2
    else:
       if buyer_capacity>=0.9*seller_capacity:
          if argument_buyer==0:
             argument_seller=3
          elif argument_buyer==1:
             argument_seller=2
       else:
          if argument_buyer==0:
             argument_seller=2
          elif argument_buyer==1:
             argument_seller=3

    arg_strat=0

    buyer_init_utility = 0
    seller_init_utility = 0

    budget_dict = {0:'low',1:'moderate',2:'high'}
    budget=-1

    if buyer_initial_price <= 0.65*seller_initial_price:
      budget=0
    elif buyer_initial_price >= 0.85*seller_initial_price:
      budget=2
    else:
      budget=1

    traveler=-1 #traveler's intent
    agent=-1    #agent's intent
    budget_disclosed=False #True when buyer has disclosed the budget

    stage = 1 #keeps track of the current stage in the conversation
    arg=0     #keeps track whether argumentation phase is going on or not
    stage_seq = [1,1,1] #stores the stage sequence for the ongoing conversation
    offers = [None, None, seller_price] #stores all the offers proposed at each utterance during the conversation

    aspects = {0:'price',1:'amenity'}
    aspects_covered=set()

    domain=None
    change=False #keeps track whether the stage has changed or not
    disagree=0

    buyer_util=0
    seller_util=0

    argument_streak=0 #To keep the argumentation phase limited, the conversation should not remain in Argumentation phase for a longer time if the buyer's response is not positive
    argument_limit=[4,7,4,7]
    arg_flag=False
    arg_dist_cont = [[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,0,0,0]]
    arg_dist_enter = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0]]

    if (buyer_capacity/seller_capacity)>=0.9:
      no_change_deadline=5
    else:
      no_change_deadline=3
    no_change_streak=0
    no_change_count=0
    mention_budget=0

    offer=seller_price
    removed=None
    removed_info=None
    added=None
    added_info=None
    aspect=None #keeps track of the aspect in focus
    aspect_info=None  #keeps track of the information about the aspect



    Offers=[None, None, seller_price]
    Stage=[1,1,1]
    Removed=[None,None,None]
    Removed_cost=[None,None,None]
    Added=[None,None,None]
    Added_cost=[None,None,None]
    Aspect=[None,None,None]
    Argumentation=[0,0,0]
    buyer_last=0  #keeps track of the last buyer's intent
    seller_last=1 #keeps track of the last seller's intent

    while True:

      if t==0:

        if buyer_capacity>=0.9*seller_capacity:
            traveler = random.choice([1,1,1,1,1,1,1,7,7,7])
        else:
            traveler = random.choice([1,1,1,7,7,7,7,7,7,7])
        if traveler==7:
          aspect='price'
          stage=3
          change=True
          if budget_disclosed==True:
            buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
            buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
            offer=buyer_price
          else:
            budget_disclosed=True
            offer=buyer_price
          uttr = Negotiate_Price_Decrease(seller_price,buyer_price)
          #utterances.append(uttr)


        else:
            change=False
            for i in curr_amenities:
              if i not in aspects_covered:
                aspects_covered.add(i)
                aspect=i
                aspect_info=curr_amenities[i]
                break
            if aspect!=None:
              dummy=1
              uttr = Ask_Clarification(aspect,True)
              #utterances.append(uttr)
            else:
              traveler=7
              aspect='price'
              stage=3
              change=True
              if budget_disclosed==True:
                buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                offer=buyer_price
              else:
                budget_disclosed=True
                offer=buyer_price
              uttr = Negotiate_Price_Decrease(seller_price,buyer_price)
              #utterances.append(uttr)
        dialogue_flow.append(traveler)
        #t= t+1
      elif t>20:
        if buyer_price<seller_min_price:
          agent=14
          uttr=Reject_seller()
        else:
          agent=13
          uttr=Accept_seller()

      else:

      ########################################################### Buyer Simulation ####################################################################
        if t%2==0:
            if stage==1:
              prev = dialogue_flow[-1]
              if prev==2:

                #After getting clarification, whether to keep the option or not depends on the distribution
                remove=None
                if random.random()<=distribution[aspect_info[1]]/100:
                  remove=True
                else:
                  remove=False

                if remove==True:
                  traveler = 3
                  domains = update_domains(domains, aspect_info[1],-1) #This removal is recorded and agent's distribution updated
                  price_gap = (seller_price-buyer_price)/seller_price
                  if price_gap>=0.2:
                    mention_budget=random.choice([1,1,0])
                    if mention_budget==1:
                      buyer_util=expected_utility(buyer_util,t,nego_deadline,tsi)
                      buyer_price=counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                      uttr=Remove_X_buyer(aspect,buyer_price)
                      #utterances.append(uttr)
                    else:
                      dummy=1
                      uttr = Remove_X_buyer(aspect,None)
                      #utterances.append(uttr)

                  else:
                    mention_budget=0
                    uttr = Remove_X_buyer(aspect,None)
                    #utterances.append(uttr)
                  stage=2
                  change=True
                  removed=aspect
                  removed_info=aspect_info

                else:
                  domains = update_domains(domains, aspect_info[1], 1)
                  if no_change_count<no_change_deadline and buyer_price>=0.9*buyer_max_price:
                    traveler=9
                    aspect='price'
                    stage=3
                    change=True
                    offer=buyer_price
                    uttr = Price_NoChange_buyer(None,buyer_price)
                    #utterance.append(uttr)

                  else:
                    traveler=7
                    aspect='price'
                    stage=3
                    change=True
                    if budget_disclosed==True:
                      buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                      buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                    else:
                      budget_disclosed=True
                      offer=buyer_price
                    uttr = Negotiate_Price_Decrease(seller_price,buyer_price)
                    #utterances.append(uttr)

              elif prev in sugg or prev in arg_sugg:
                if prev in arg_sugg:
                  if argument_streak>argument_limit[argument_buyer]:
                    arg=0
                    argument_streak=0

                remove=None
                if random.random()<=distribution[aspect_info[1]]/100:
                  remove=True
                else:
                  remove=False
                if remove==True:
                    traveler=3
                    if arg==1:
                      arg = random.choice(arg_dist_cont[argument_buyer])
                    else:
                      arg = random.choice(arg_dist_enter[argument_buyer])

                    if arg==1:
                      argument_streak=argument_streak+1
                      traveler=5
                    else:
                      argument_streak=0

                    if traveler==5:
                      dummy=1
                      uttr = Disagree_X(aspect)
                      #utterances.append(uttr)
                    else:
                      mention_budget=0
                      domains = update_domains(domains, aspect_info[1],-1) #This removal is recorded and agent's distribution updated
                      uttr = Remove_X_buyer(aspect,None)
                      #utterances.append(uttr)
                      removed=added
                      removed_info=added_info
                      added=None
                      added_info=None
                else:
                    if seller_price>=1.1*buyer_capacity:
                      traveler=random.choice([6,6,6,6,6,6,6,6,14,14])
                    else:
                      traveler=14
                    if traveler==6:
                      dummy=1
                      uttr=Ask_Price(None)
                      #utterances.append(uttr)
                    else:
                      dummy=1
                      uttr=provide_consent(added,False)
                      #utterances.append(uttr)

              elif prev in price or prev in arg_price:
                if prev in arg_price:
                  if argument_streak>argument_limit[argument_buyer]:
                    arg=0
                    argument_streak=0

                if seller_price<=buyer_max_price:
                  if seller_price<=1.1*buyer_price:
                    traveler=11
                    uttr=Accept_buyer()
                    #utterances.append(uttr)

                  else:
                    if no_change_count<no_change_deadline:
                      traveler=random.choice([9,9,9,9,9,9,7,7,7,3,3,3])
                    else:
                      traveler=random.choice([7,3])
                else:
                  if no_change_count<no_change_deadline:
                    traveler=random.choice([7,7,7,7,7,7,9,9,3,3,3,3,3,3])
                  else:
                    traveler=random.choice([7,3])

                if traveler in stage3:
                  if arg==1:
                    arg = random.choice(arg_dist_cont[argument_buyer])
                  else:
                    arg = random.choice(arg_dist_enter[argument_buyer])

                  if arg==1:
                    argument_streak=argument_streak+1
                    if traveler==7:
                      traveler=8
                      uttr=Concern_Price(seller_price)
                    elif traveler==9:
                      traveler=10
                      uttr=Disagree_Price(seller_price)
                  else:
                    argument_streak=0
                    if traveler==7:
                      buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                      buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                      uttr=Negotiate_Price_Decrease(seller_price,buyer_price)
                      #utterances.append(uttr)
                    else:
                      offer=buyer_price
                      uttr=Price_NoChange_buyer(buyer_price,seller_price)
                      #utterances.append(uttr)

                else:
                  arg=0
                  argument_streak=0

                  to_remove=None
                  to_remove_info=None
                  while to_remove==None:
                    if len(curr_amenities)==1:
                      aspect='price'
                      break
                    temp_list=[0,1,2,3,4]
                    temp_domain=random.choices(temp_list, weights=distribution, k=1)[0]
                    for ame in curr_amenities:
                      if curr_amenities[ame][1]==temp_domain:
                        to_remove=ame
                        to_remove_info=curr_amenities[ame]
                  if to_remove!=None:
                    aspect=to_remove
                    aspect_info=to_remove_info
                    removed=aspect
                    removed_info=aspect_info
                    mention_budget=0
                    uttr=Remove_X_buyer(aspect,None)
                  else:
                    traveler=7
                    buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                    buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                    offer=buyer_price
                    uttr=Negotiate_Price_Decrease(seller_price,buyer_price)


              if traveler in stage2 or traveler in arg_stage2:
                  stage=2
                  change=True
              elif traveler in stage3 or traveler in arg_stage3:
                  stage=3
                  change=True
              else:
                 change=False

              dialogue_flow.append(traveler)

            elif stage==2:
              prev = dialogue_flow[-1]
              if prev in sugg or prev in arg_sugg:
                if prev in arg_sugg:
                    if argument_streak>argument_limit[argument_buyer]:
                      arg=0
                      argument_streak=0

                if random.random()<=distribution[aspect_info[1]]/100:
                  remove=True
                else:
                  remove=False
                if remove==True:
                    traveler=3

                    if arg==1:
                      arg = random.choice(arg_dist_cont[argument_buyer])
                    else:
                      arg = random.choice(arg_dist_enter[argument_buyer])

                    if arg==1:

                      argument_streak=argument_streak+1
                      traveler=5
                    else:
                      argument_streak=0

                    if traveler==5:
                      dummy=1
                      uttr = Disagree_X(aspect)
                      #utterances.append(uttr)
                    else:
                      mention_budget=0
                      domains = update_domains(domains, aspect_info[1],-1) #This removal is recorded and agent's distribution updated
                      uttr = Remove_X_buyer(aspect,None)
                      #utterances.append(uttr)
                      removed=added
                      removed_info=added_info
                      added=None
                      added_info=None
                else:
                    if seller_price>=1.1*buyer_capacity:
                      traveler=random.choice([6,6,6,6,6,6,6,6,14,14,14,1,1])
                    else:
                      traveler=14
                    if traveler==6:
                      dummy=1
                      uttr=Ask_Price(None)
                      #utterances.append(uttr)
                    elif traveler==1:
                      dummy=1
                      uttr=Ask_Clarification(aspect,True)
                    else:
                      dummy=1
                      uttr=provide_consent(added,False)
                      #utterances.append(uttr)

              if prev==8 or prev==16:

                if cost<=buyer_max_price:
                  if cost<=0.9*buyer_max_price:
                    traveler=11
                    uttr=Accept_buyer()
                  else:
                    traveler=7

                else:
                  traveler=random.choice([7,7,7,7,7,7,7,3,3,3])

                if traveler!=14:
                  if arg==1:
                    arg = random.choice(arg_dist_cont[argument_buyer])
                  else:
                    arg = random.choice(arg_dist_enter[argument_buyer])

                  if arg==1:
                    argument_streak=argument_streak+1
                    if traveler==3:
                      arg=0
                      argument_streak=0

                    elif traveler==7:
                      traveler=8
                      aspect='price'
                      uttr=Concern_Price(cost)
                  if arg==0:
                    argument_streak=0
                    if traveler==3:
                      mention_budget=0
                      removed=added
                      removed_info=added_info
                      added=None
                      added_info=None
                      uttr=Remove_X_buyer(aspect,None)
                    elif traveler==7:
                      aspect='price'
                      buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                      buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                      uttr=Negotiate_Price_Decrease(cost,buyer_price)
                else:
                  arg=0
                  argument_streak=0
                  dummy=1
                  uttr=provide_consent(added,False)

              if prev==6:
                if cost<=buyer_max_price:
                  if cost<=0.9*buyer_max_price:
                    traveler=11
                    uttr=Accept_buyer()
                  else:
                    traveler=7

                else:
                  traveler=random.choice([7,7,7,7,7,7,3,3,3,3])

                if traveler==3:
                  to_remove=None
                  to_remove_info=None
                  while to_remove==None:
                    if len(curr_amenities)==1:
                      aspect='price'
                      break
                    temp_list=[0,1,2,3,4]
                    temp_domain=random.choices(temp_list, weights=distribution, k=1)[0]
                    for ame in curr_amenities:
                      if curr_amenities[ame][1]==temp_domain:
                        to_remove=ame
                        to_remove_info=curr_amenities[ame]
                  if to_remove!=None:
                    aspect=to_remove
                    aspect_info=to_remove_info
                    removed=aspect
                    removed_info=aspect_info
                    mention_budget=0
                    uttr=Remove_X_buyer(aspect,None)
                  else:
                    traveler=7

                if traveler==7:
                  buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                  buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                  offer=buyer_price
                  uttr=Negotiate_Price_Decrease(seller_price,buyer_price)

              if traveler in stage1 or traveler in arg_stage1:
                  stage=1
                  change=True
              elif traveler in stage3 or traveler in arg_stage3:
                  stage=3
                  change=True
              elif traveler in stage2 or traveler in arg_stage2:
                  change=False

              dialogue_flow.append(traveler)

            elif stage==3:
              prev = dialogue_flow[-1]
              if prev in price or prev in arg_price:
                if prev in arg_price:
                  if argument_streak>argument_limit[argument_buyer]:
                    arg=0
                    argument_streak=0

                if seller_price<=buyer_max_price:
                  if seller_price<=1.1*buyer_price:
                    traveler=11
                    uttr=Accept_buyer()
                    #utterances.append(uttr)

                  else:
                    if no_change_count<no_change_deadline:
                      traveler=random.choice([9,9,9,9,9,9,7,7,7,3,3,3])
                    else:
                      traveler=random.choice([7,3])
                else:
                  if no_change_count<no_change_deadline:
                    traveler=random.choice([7,7,7,7,7,7,9,9,3,3,3,3,3,3])
                  else:
                    traveler=random.choice([7,3])

                if traveler in stage3:
                  if arg==1:
                    arg=random.choice(arg_dist_cont[argument_buyer])
                  else:
                    arg=random.choice(arg_dist_enter[argument_buyer])

                  if arg==1:
                    argument_streak=argument_streak+1
                    if traveler==7:
                      traveler=8
                      uttr=Concern_Price(seller_price)
                    elif traveler==9:
                      traveler=10
                      uttr=Disagree_Price(seller_price)
                  else:
                    argument_streak=0
                    if traveler==7:
                      buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                      buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                      uttr=Negotiate_Price_Decrease(seller_price,buyer_price)
                      #utterances.append(uttr)
                    else:
                      offer=buyer_price
                      uttr=Price_NoChange_buyer(buyer_price,seller_price)
                      #utterances.append(uttr)

                else:
                  arg=0
                  argument_streak=0

                  to_remove=None
                  to_remove_info=None
                  while to_remove==None:
                    if len(curr_amenities)==1:
                      aspect='price'
                      break
                    temp_list=[0,1,2,3,4]
                    temp_domain=random.choices(temp_list, weights=distribution, k=1)[0]
                    for ame in curr_amenities:
                      if curr_amenities[ame][1]==temp_domain:
                        to_remove=ame
                        to_remove_info=curr_amenities[ame]
                  if to_remove!=None:
                    aspect=to_remove
                    aspect_info=to_remove_info
                    removed=aspect
                    removed_info=aspect_info
                    mention_budget=0
                    uttr=Remove_X_buyer(aspect,None)
                  else:
                    traveler=7
                    buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                    buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                    offer=buyer_price
                    uttr=Negotiate_Price_Decrease(seller_price,buyer_price)

              elif prev in sugg or prev in arg_sugg:
                if prev in arg_sugg:
                  if argument_streak>argument_limit[argument_buyer]:
                    arg=0
                    argument_streak=0

                if random.random()<=distribution[aspect_info[1]]/100:
                  remove=True
                else:
                  remove=False

                if remove==True:
                    traveler=3
                    if arg==1:
                      arg=random.choice(arg_dist_cont[argument_buyer])
                    else:
                      arg=random.choice(arg_dist_enter[argument_buyer])

                    if arg==1:
                      argument_streak=argument_streak+1
                      traveler=5
                    else:
                      argument_streak=0

                    if traveler==5:
                      dummy=1
                      uttr = Disagree_X(aspect)
                      #utterances.append(uttr)
                    else:
                      domains = update_domains(domains, aspect_info[1],-1) #This removal is recorded and agent's distribution updated
                      mention_budget=0
                      uttr = Remove_X_buyer(aspect,None)
                      #utterances.append(uttr)
                      removed=added
                      removed_info=added_info
                      added=None
                      added_info=None
                else:
                    if seller_price>=1.1*buyer_capacity:
                      traveler=random.choice([6,6,6,6,6,6,6,6,14,14,14,1,1])
                    else:
                      traveler=14
                    if traveler==6:
                      dummy=1
                      uttr=Ask_Price(None)
                      #utterances.append(uttr)
                    elif traveler==1:
                      dummy=1
                      uttr=Ask_Clarification(aspect,True)
                    else:
                      dummy=1
                      uttr=provide_consent(added,False)
                      #utterances.append(uttr)

              elif prev==6:
                 traveler=6
                 uttr=Ask_Price(None)

              elif prev==8 or prev==16:
                if cost<=buyer_max_price:
                  if cost<=0.9*buyer_max_price:
                    traveler=11
                    uttr=Accept_buyer()
                  else:
                    traveler=random.choice([14,14,14,14,14,14,14,7,7,7])

                else:
                  traveler=random.choice([7,7,7,7,7,7,7,3,3,3])

                if traveler!=14:
                  if arg==1:
                    arg = random.choice(arg_dist_cont[argument_buyer])
                  else:
                    arg = random.choice(arg_dist_enter[argument_buyer])

                  if arg==1:
                    argument_streak=argument_streak+1
                    if traveler==3:
                      arg=0
                      argument_streak=0

                    elif traveler==7:
                      traveler=8
                      aspect='price'
                      uttr=Concern_Price(cost)
                  if arg==0:
                    argument_streak=0
                    if traveler==3:
                      mention_budget=0
                      removed=added
                      removed_info=added_info
                      added=None
                      added_info=None
                      uttr=Remove_X_buyer(aspect,None)
                    elif traveler==7:
                      aspect='price'
                      buyer_util = expected_utility(buyer_util, t, nego_deadline, tsi)
                      buyer_price = counter_offer('b',buyer_price,buyer_max_price,buyer_util)
                      offer=buyer_price
                      uttr=Negotiate_Price_Decrease(cost,buyer_price)
                else:
                  arg=0
                  argument_streak=0
                  dummy=1
                  uttr=provide_consent(aspect,False)

              if traveler in stage1 or traveler in arg_stage1:
                  stage=1
                  change=True
              elif traveler in stage2 or traveler in arg_stage2:
                 stage=2
                 change=True
              elif traveler in stage3 or traveler in arg_stage3:
                 change=False

              dialogue_flow.append(traveler)

      ######################################################################### Agent Simulation ##########################################################

        else:
          if dialogue_flow[-1]==14:
            agent=16
            uttr=consent_response(added,cost)
            dialogue_flow.append(agent)

          elif dialogue_flow[-1]==11:
            agent=15
            uttr=Acknowledge_acceptance()
            dialogue_flow.append(agent)

          elif stage==1:
            prev=dialogue_flow[-1]
            if prev==1:
                agent=2
                uttr=Provide_Clarification(aspect)
            elif prev==2:
                agent=3
            dialogue_flow.append(agent)

          elif stage==2:
            prev = dialogue_flow[-1]
            if prev==3 :
              agent = random.choice([4,4,4,4,6,6])
            elif prev==5:
                if argument_seller==4:
                  arg = random.choice([1,1,1,1,1,1,1,1,0,0])
                else:
                  arg = random.choice([1,1,1,1,1,0,0,0,0,0])
                if arg==1:
                  argument_streak=argument_streak+1
                  agent = random.choice([3,7])
                else:
                  argument_streak=0
                  agent = random.choice([4,4,4,4,6,6])

            elif prev==6:
                agent=8
                offer=cost
                uttr=Tell_Price(cost)

            if agent==4:
              if removed in curr_amenities:
                del curr_amenities[removed]
              removed_amenities[removed]=removed_info
              to_add=None
              to_add_info=None
              if mention_budget==1:
                to_add_info=lower_price(buyer_price,removed_info[1],removed_info[0],cost,curr_amenities,removed_amenities,amenities)
              else:
                to_add_info=lower_price(None,removed_info[1],removed_info[0],cost,curr_amenities,removed_amenities,amenities)
              if to_add_info!=None:
                to_add=amenities[to_add_info[0]][to_add_info[1]][0]
                added=to_add
                added_info=to_add_info
                aspect=added
                aspect_info=added_info
                cost=cost-removed_info[2]+added_info[2]
                offer=cost
                seller_price=cost
                uttr=Remove_Y_Add_X(removed,added)

              else:
                agent=6
            if agent==6:
              if removed in curr_amenities:
                del curr_amenities[removed]
              removed_amenities[removed]=removed_info
              cost=cost-removed_info[2]
              offer=cost
              seller_price=cost
              uttr=Remove_X_seller(removed,cost)
            if agent==3:
              dummy=1
              uttr=Assurance_Y(aspect)
            if agent==7:
              temp=random.choice([0,1,2,3])
              while temp==arg_strat:
                temp=random.choive([0,1,2,3])
              arg_strat=temp
              uttr=Justify_Y(aspect,arg_sub_strategy[arg_strat])

            dialogue_flow.append(agent)

          elif stage==3:
            prev = dialogue_flow[-1]
            if prev==6:
                agent=8
                uttr=Tell_Price(cost)

            nego_flag=False
            if prev==8 or prev==10:
              nego_flag=True
              if argument_seller==4:
                  arg = random.choice([1,1,1,1,1,1,1,1,0,0])
              else:
                  arg = random.choice([1,1,1,1,1,0,0,0,0,0])
              if arg==1:
                argument_streak=argument_streak+1
                nego_flag=False
                offer=cost
                agent=random.choice([11,12])
                if agent==11:
                  dummy=1
                  uttr=Assurance_Price(cost)
                elif agent==12:
                  dummy=2
                  uttr=Justify_Price(cost)
              else:
                argument_streak=0


            if prev==7 or prev==9 or nego_flag==True:
              if buyer_price>=1.1*seller_min_price:
                agent=13
                uttr=Accept_seller()
              else:
                agent=random.choice([9,9,9,9,10,10,10,10,4,4])
                if agent==4:
                  to_remove=None
                  to_remove_info=None
                  while to_remove==None:
                    if len(curr_amenities)==1:
                      aspect='price'
                      break
                    temp_list=[0,1,2,3,4]
                    temp_domain=random.choices(temp_list, weights=domains, k=1)[0]
                    for ame in curr_amenities:
                      if curr_amenities[ame][1]==temp_domain:
                        to_remove=ame
                        to_remove_info=curr_amenities[ame]
                  if to_remove!=None:
                    removed=to_remove
                    removed_info=to_remove_info
                    if removed in curr_amenities:
                      del curr_amenities[removed]
                    removed_amenities[removed]=removed_info
                    to_add=None
                    to_add_info=None
                    to_add_info=lower_price(buyer_price,removed_info[1],removed_info[0],cost,curr_amenities,removed_amenities,amenities)

                    if to_add_info!=None:
                      to_add=amenities[to_add_info[0]][to_add_info[1]][0]
                      added=to_add
                      added_info=to_add_info
                      aspect=added
                      aspect_info=added_info
                      cost=cost-removed_info[2]+added_info[2]
                      offer=cost
                      seller_price=cost
                      uttr=Remove_Y_Add_X(removed,added)
                    else:
                      agent=random.choice([9,10])
                  else:
                    agent=random.choice([9,10])

                if agent==10:
                  seller_util=expected_utility(seller_util,t,nego_deadline,tsi)
                  seller_price=counter_offer('s',seller_price,seller_min_price,seller_util)
                  cost=seller_price
                  offer=cost
                  uttr=Negotiate_Price_Increase(buyer_price,seller_price)
                if agent==9:
                  cost=seller_price
                  offer=cost
                  uttr=Price_NoChange_seller(seller_price)

            dialogue_flow.append(agent)

      if removed_info==None:
        removed_cost=None
      else:
        removed_cost=removed_info[2]

      if added_info==None:
        added_cost=None
      else:
        added_cost=added_info[2]
      Offers.append(offer)
      Aspect.append(aspect)
      utterances.append(uttr)
      Removed.append(removed)
      Removed_cost.append(removed_cost)
      Added.append(added)
      Added_cost.append(added_cost)
      Stage.append(stage)
      Argumentation.append(arg)

      if agent==15 or agent==13 or agent==14:
        break

      t=t+1

    intents=[]
    speaker=[]
    conv=[]
    preference=[]
    Buyer=[]
    Arg_buyer=[]
    Arg_seller=[]
    Nego=[]
    for i,intent in enumerate(dialogue_flow):
      conv.append(conv_id)
      preference.append(package_name)
      Buyer.append(buyer)
      Arg_buyer.append(argument_buyer)
      Arg_seller.append(argument_seller)
      Nego.append(negotiation)
      if i%2==0:
        intents.append(agent_intent[intent])
        speaker.append(1)
      else:
        intents.append(traveler_intent[intent])
        speaker.append(0)



    return conv, preference, Buyer, Arg_buyer, Arg_seller, Nego, speaker, intents, utterances, Stage, Aspect, Offers, Removed, Removed_cost, Added, Added_cost, Argumentation
    #return intents, argument_buyer

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import os

# Define the path where you want to save the files in your Google Drive
save_path = '/content/drive/My Drive/new_all_negotiation_datasets/12 July 2024'  # Change the folder path as needed

# Create the directory if it doesn't exist
if not os.path.exists(save_path):
    os.makedirs(save_path)

def synchronize_lengths(lists):
    min_length = min(len(lst) for lst in lists)
    return [lst[:min_length] for lst in lists]

def generate_flow(N):
    Conversation = []
    Preference = []
    Buyer = []
    Argument_buyer = []
    Argument_seller = []
    Negotiation = []
    Speaker = []
    Intent = []
    Utterances = []
    Stage = []
    Proposed_offer = []
    Removed = []
    Removed_cost = []
    Added = []
    Added_cost = []
    Aspect = []
    Argumentation = []

    for i in range(N):
        conv, preference, buyer, arg_buyer, arg_seller, nego, speaker, intents, utterances, stage, aspect, offers, removed, removed_cost, added, added_cost, argumentation = execute_flow(data, i)

        # Synchronize lengths of lists
        conv, preference, buyer, arg_buyer, arg_seller, nego, speaker, intents, utterances, stage, aspect, offers, removed, removed_cost, added, added_cost, argumentation = synchronize_lengths(
            [conv, preference, buyer, arg_buyer, arg_seller, nego, speaker, intents, utterances, stage, aspect, offers, removed, removed_cost, added, added_cost, argumentation]
        )

        Conversation.extend(conv)
        Preference.extend(preference)
        Buyer.extend(buyer)
        Argument_buyer.extend(arg_buyer)
        Argument_seller.extend(arg_seller)
        Negotiation.extend(nego)
        Speaker.extend(speaker)
        Intent.extend(intents)
        Utterances.extend(utterances)
        Stage.extend(stage)
        Aspect.extend(aspect)
        Proposed_offer.extend(offers)
        Removed.extend(removed)
        Removed_cost.extend(removed_cost)
        Added.extend(added)
        Added_cost.extend(added_cost)
        Argumentation.extend(argumentation)
        print(i)

    Data = {
        'conv_id': Conversation,
        'Preference Profile': Preference,
        'Buyer Profile': Buyer,
        'Buyer Argument Profile': Argument_buyer,
        'Seller Argument Profile': Argument_seller,
        'Negotiation Strategy': Negotiation,
        'Speaker': Speaker,
        'Intent': Intent,
        'Utterance': Utterances,
        'Stage': Stage,
        'Aspect': Aspect,
        'Offer': Proposed_offer,
        'Removed Amenity': Removed,
        'Removed Cost': Removed_cost,
        'Added Amenity': Added,
        'Added Cost': Added_cost,
        'Argument': Argumentation
    }

    # Check if all lists have the same length before creating the DataFrame
    lengths = {key: len(value) for key, value in Data.items()}
    print("Lengths of all lists:", lengths)

    if len(set(lengths.values())) == 1:
        dataframe = pd.DataFrame(Data)
        return dataframe
    else:
        print("Error: All lists are not of the same length.")
        for key, length in lengths.items():
            print(f"{key}: {length}")
        return None

# Loop to call the function and save the output
for i in range(755, 2501):
    success = False
    while not success:
        try:
            print(f"Generating data for file dataset-{i}.csv")
            dataframe = generate_flow(1)
            if dataframe is not None:
                filename = os.path.join(save_path, f'dataset-{i}.csv')
                dataframe.to_csv(filename, index=False)
                print(f"Saved file {filename}")
                success = True
            else:
                print(f"Retrying file dataset-{i}.csv due to data length mismatch")
        except Exception as e:
            print(f"An error occurred for file dataset-{i}.csv: {e}")
            print("Retrying...")



import pandas as pd
import os

# Define the path where the generated CSV files are saved in your Google Drive
load_path = '/content/drive/My Drive/new_all_negotiation_datasets/9-July-2024/'
save_path = '/content/drive/My Drive/new_all_negotiation_datasets/'  # Same path or a different one to save the merged file

# List all CSV files in the directory
csv_files = [f for f in os.listdir(load_path) if f.startswith('dataset-') and f.endswith('.csv')]

print(len(csv_files))

# Initialize an empty list to hold the dataframes
dataframes = []
conv_id_counter = 1

# Loop through the list of CSV files and read each one into a dataframe
for csv_file in csv_files:
    file_path = os.path.join(load_path, csv_file)
    df = pd.read_csv(file_path)

    # Update the conv_id column
    df['conv_id'] = conv_id_counter
    conv_id_counter += 1

    dataframes.append(df)

# Concatenate all the dataframes into a single dataframe
merged_dataframe = pd.concat(dataframes, ignore_index=True)

# Save the merged dataframe to a new CSV file
merged_filename = os.path.join(save_path, 'merged_dataset.csv')
merged_dataframe.to_csv(merged_filename, index=False)

print(f"All files have been merged and saved as {merged_filename}")

import pandas as pd

# Load the combined CSV file
file_path = '/content/drive/My Drive/new_all_negotiation_datasets/merged_dataset.csv'
df = pd.read_csv(file_path)

# For each conversation (conv_id), take the first occurrence of 'Preference Profile'
preference_profile_per_conversation = df.groupby('conv_id')['Preference Profile'].first().reset_index()

# Calculate the average number of utterances per conversation
utterances_per_conversation = df.groupby('conv_id').size()
avg_utterances_per_conversation = utterances_per_conversation.mean()

# Calculate the most common 'Preference Profile'
most_common_preference_profile = preference_profile_per_conversation['Preference Profile'].mode()[0]

# Calculate the distribution of 'Preference Profile'
preference_profile_distribution = preference_profile_per_conversation['Preference Profile'].value_counts()

# Additional statistics (optional)
total_conversations = preference_profile_per_conversation['conv_id'].nunique()
total_utterances = len(df)
unique_preference_profiles = preference_profile_per_conversation['Preference Profile'].nunique()

# Print the statistics
print(f"Average number of utterances per conversation: {avg_utterances_per_conversation}")
print(f"Most common 'Preference Profile': {most_common_preference_profile}")
print(f"Distribution of 'Preference Profile':")
print(preference_profile_distribution)
print(f"Total number of conversations: {total_conversations}")
print(f"Total number of utterances: {total_utterances}")
print(f"Number of unique 'Preference Profiles': {unique_preference_profiles}")

